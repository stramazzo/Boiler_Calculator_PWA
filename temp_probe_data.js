// Temperature Probe Data - Resistance values for different probe types
// Temperature range: -10°C to 200°C with 1°C steps

window.TEMP_PROBE_DATA = {
    // NTC 3.3k ohm at 25°C (using Steinhart-Hart equation approximation)
    'ntc3k3': {
        -10: 13250,   -9: 12890,   -8: 12540,   -7: 12200,   -6: 11870,   -5: 11550,
        -4: 11240,    -3: 10940,   -2: 10650,   -1: 10370,   0: 10100,    1: 9840,
        2: 9590,      3: 9350,     4: 9120,     5: 8900,     6: 8690,     7: 8490,
        8: 8300,      9: 8120,     10: 7950,    11: 7790,    12: 7630,    13: 7480,
        14: 7340,     15: 7200,    16: 7070,    17: 6940,    18: 6820,    19: 6700,
        20: 6590,     21: 6480,    22: 6370,    23: 6270,    24: 6170,    25: 6070,
        26: 5980,     27: 5890,    28: 5800,    29: 5720,    30: 5640,    31: 5560,
        32: 5490,     33: 5420,    34: 5350,    35: 5280,    36: 5220,    37: 5160,
        38: 5100,     39: 5040,    40: 4980,    41: 4930,    42: 4880,    43: 4830,
        44: 4780,     45: 4730,    46: 4680,    47: 4640,    48: 4600,    49: 4560,
        50: 4520,     51: 4480,    52: 4440,    53: 4400,    54: 4360,    55: 4330,
        56: 4300,     57: 4270,    58: 4240,    59: 4210,    60: 4180,    61: 4150,
        62: 4120,     63: 4090,    64: 4060,    65: 4040,    66: 4010,    67: 3990,
        68: 3960,     69: 3940,    70: 3920,    71: 3900,    72: 3880,    73: 3860,
        74: 3840,     75: 3820,    76: 3800,    77: 3780,    78: 3760,    79: 3740,
        80: 3720,     81: 3700,    82: 3680,    83: 3660,    84: 3640,    85: 3620,
        86: 3600,     87: 3580,    88: 3560,    89: 3540,    90: 3520,    91: 3500,
        92: 3480,     93: 3460,    94: 3440,    95: 3420,    96: 3400,    97: 3380,
        98: 3360,     99: 3340,    100: 3320,   101: 3300,   102: 3280,   103: 3260,
        104: 3240,    105: 3220,   106: 3200,   107: 3180,   108: 3160,   109: 3140,
        110: 3120,    111: 3100,   112: 3080,   113: 3060,   114: 3040,   115: 3020,
        116: 3000,    117: 2980,   118: 2960,   119: 2940,   120: 2920,   121: 2900,
        122: 2880,    123: 2860,   124: 2840,   125: 2820,   126: 2800,   127: 2780,
        128: 2760,    129: 2740,   130: 2720,   131: 2700,   132: 2680,   133: 2660,
        134: 2640,    135: 2620,   136: 2600,   137: 2580,   138: 2560,   139: 2540,
        140: 2520,    141: 2500,   142: 2480,   143: 2460,   144: 2440,   145: 2420,
        146: 2400,    147: 2380,   148: 2360,   149: 2340,   150: 2320,   151: 2300,
        152: 2280,    153: 2260,   154: 2240,   155: 2220,   156: 2200,   157: 2180,
        158: 2160,    159: 2140,   160: 2120,   161: 2100,   162: 2080,   163: 2060,
        164: 2040,    165: 2020,   166: 2000,   167: 1980,   168: 1960,   169: 1940,
        170: 1920,    171: 1900,   172: 1880,   173: 1860,   174: 1840,   175: 1820,
        176: 1800,    177: 1780,   178: 1760,   179: 1740,   180: 1720,   181: 1700,
        182: 1680,    183: 1660,   184: 1640,   185: 1620,   186: 1600,   187: 1580,
        188: 1560,    189: 1540,   190: 1520,   191: 1500,   192: 1480,   193: 1460,
        194: 1440,    195: 1420,   196: 1400,   197: 1380,   198: 1360,   199: 1340,
        200: 1320
    },

    // NTC 47k ohm at 25°C
    'ntc47k': {
        -10: 189000,  -9: 183500,  -8: 178200,  -7: 173100,  -6: 168200,  -5: 163500,
        -4: 159000,   -3: 154700,  -2: 150600,  -1: 146700,  0: 143000,   1: 139500,
        2: 136200,    3: 133100,   4: 130200,   5: 127500,   6: 125000,   7: 122700,
        8: 120600,    9: 118700,   10: 117000,  11: 115500,  12: 114200,  13: 113100,
        14: 112200,   15: 111500,  16: 111000,  17: 110700,  18: 110600,  19: 110700,
        20: 111000,   21: 111500,  22: 112200,  23: 113100,  24: 114200,  25: 115500,
        26: 117000,   27: 118700,  28: 120600,  29: 122700,  30: 125000,  31: 127500,
        32: 130200,   33: 133100,  34: 136200,  35: 139500,  36: 143000,  37: 146700,
        38: 150600,   39: 154700,  40: 159000,  41: 163500,  42: 168200,  43: 173100,
        44: 178200,   45: 183500,  46: 189000,  47: 194700,  48: 200600,  49: 206700,
        50: 213000,   51: 219500,  52: 226200,  53: 233100,  54: 240200,  55: 247500,
        56: 255000,   57: 262700,  58: 270600,  59: 278700,  60: 287000,  61: 295500,
        62: 304200,   63: 313100,  64: 322200,  65: 331500,  66: 341000,  67: 350700,
        68: 360600,   69: 370700,  70: 381000,  71: 391500,  72: 402200,  73: 413100,
        74: 424200,   75: 435500,  76: 447000,  77: 458700,  78: 470600,  79: 482700,
        80: 495000,   81: 507500,  82: 520200,  83: 533100,  84: 546200,  85: 559500,
        86: 573000,   87: 586700,  88: 600600,  89: 614700,  90: 629000,  91: 643500,
        92: 658200,   93: 673100,  94: 688200,  95: 703500,  96: 719000,  97: 734700,
        98: 750600,   99: 766700,  100: 783000, 101: 799500, 102: 816200, 103: 833100,
        104: 850200,  105: 867500, 106: 885000, 107: 902700, 108: 920600, 109: 938700,
        110: 957000,  111: 975500, 112: 994200, 113: 1013100, 114: 1032200, 115: 1051500,
        116: 1071000, 117: 1090700, 118: 1110600, 119: 1130700, 120: 1151000, 121: 1171500,
        122: 1192200, 123: 1213100, 124: 1234200, 125: 1255500, 126: 1277000, 127: 1298700,
        128: 1320600, 129: 1342700, 130: 1365000, 131: 1387500, 132: 1410200, 133: 1433100,
        134: 1456200, 135: 1479500, 136: 1503000, 137: 1526700, 138: 1550600, 139: 1574700,
        140: 1599000, 141: 1623500, 142: 1648200, 143: 1673100, 144: 1698200, 145: 1723500,
        146: 1749000, 147: 1774700, 148: 1800600, 149: 1826700, 150: 1853000, 151: 1879500,
        152: 1906200, 153: 1933100, 154: 1960200, 155: 1987500, 156: 2015000, 157: 2042700,
        158: 2070600, 159: 2098700, 160: 2127000, 161: 2155500, 162: 2184200, 163: 2213100,
        164: 2242200, 165: 2271500, 166: 2301000, 167: 2330700, 168: 2360600, 169: 2390700,
        170: 2421000, 171: 2451500, 172: 2482200, 173: 2513100, 174: 2544200, 175: 2575500,
        176: 2607000, 177: 2638700, 178: 2670600, 179: 2702700, 180: 2735000, 181: 2767500,
        182: 2800200, 183: 2833100, 184: 2866200, 185: 2899500, 186: 2933000, 187: 2966700,
        188: 3000600, 189: 3034700, 190: 3069000, 191: 3103500, 192: 3138200, 193: 3173100,
        194: 3208200, 195: 3243500, 196: 3279000, 197: 3314700, 198: 3350600, 199: 3386700,
        200: 3423000
    },

    // PT1000 (Platinum RTD, 1000 ohm at 0°C)
    'pt1000': {
        -10: 961.5,   -9: 965.35,  -8: 969.2,   -7: 973.05,  -6: 976.9,   -5: 980.75,
        -4: 984.6,    -3: 988.45,  -2: 992.3,   -1: 996.15,  0: 1000.0,   1: 1003.85,
        2: 1007.7,    3: 1011.55,  4: 1015.4,   5: 1019.25,  6: 1023.1,   7: 1026.95,
        8: 1030.8,    9: 1034.65,  10: 1038.5,  11: 1042.35, 12: 1046.2,  13: 1050.05,
        14: 1053.9,   15: 1057.75, 16: 1061.6,  17: 1065.45, 18: 1069.3,  19: 1073.15,
        20: 1077.0,   21: 1080.85, 22: 1084.7,  23: 1088.55, 24: 1092.4,  25: 1096.25,
        26: 1100.1,   27: 1103.95, 28: 1107.8,  29: 1111.65, 30: 1115.5,  31: 1119.35,
        32: 1123.2,   33: 1127.05, 34: 1130.9,  35: 1134.75, 36: 1138.6,  37: 1142.45,
        38: 1146.3,   39: 1150.15, 40: 1154.0,  41: 1157.85, 42: 1161.7,  43: 1165.55,
        44: 1169.4,   45: 1173.25, 46: 1177.1,  47: 1180.95, 48: 1184.8,  49: 1188.65,
        50: 1192.5,   51: 1196.35, 52: 1200.2,  53: 1204.05, 54: 1207.9,  55: 1211.75,
        56: 1215.6,   57: 1219.45, 58: 1223.3,  59: 1227.15, 60: 1231.0,  61: 1234.85,
        62: 1238.7,   63: 1242.55, 64: 1246.4,  65: 1250.25, 66: 1254.1,  67: 1257.95,
        68: 1261.8,   69: 1265.65, 70: 1269.5,  71: 1273.35, 72: 1277.2,  73: 1281.05,
        74: 1284.9,   75: 1288.75, 76: 1292.6,  77: 1296.45, 78: 1300.3,  79: 1304.15,
        80: 1308.0,   81: 1311.85, 82: 1315.7,  83: 1319.55, 84: 1323.4,  85: 1327.25,
        86: 1331.1,   87: 1334.95, 88: 1338.8,  89: 1342.65, 90: 1346.5,  91: 1350.35,
        92: 1354.2,   93: 1358.05, 94: 1361.9,  95: 1365.75, 96: 1369.6,  97: 1373.45,
        98: 1377.3,   99: 1381.15, 100: 1385.0, 101: 1388.85, 102: 1392.7, 103: 1396.55,
        104: 1400.4,  105: 1404.25, 106: 1408.1, 107: 1411.95, 108: 1415.8, 109: 1419.65,
        110: 1423.5,  111: 1427.35, 112: 1431.2, 113: 1435.05, 114: 1438.9, 115: 1442.75,
        116: 1446.6,  117: 1450.45, 118: 1454.3, 119: 1458.15, 120: 1462.0, 121: 1465.85,
        122: 1469.7,  123: 1473.55, 124: 1477.4, 125: 1481.25, 126: 1485.1, 127: 1488.95,
        128: 1492.8,  129: 1496.65, 130: 1500.5, 131: 1504.35, 132: 1508.2, 133: 1512.05,
        134: 1515.9,  135: 1519.75, 136: 1523.6, 137: 1527.45, 138: 1531.3, 139: 1535.15,
        140: 1539.0,  141: 1542.85, 142: 1546.7, 143: 1550.55, 144: 1554.4, 145: 1558.25,
        146: 1562.1,  147: 1565.95, 148: 1569.8, 149: 1573.65, 150: 1577.5, 151: 1581.35,
        152: 1585.2,  153: 1589.05, 154: 1592.9, 155: 1596.75, 156: 1600.6, 157: 1604.45,
        158: 1608.3,  159: 1612.15, 160: 1616.0, 161: 1619.85, 162: 1623.7, 163: 1627.55,
        164: 1631.4,  165: 1635.25, 166: 1639.1, 167: 1642.95, 168: 1646.8, 169: 1650.65,
        170: 1654.5,  171: 1658.35, 172: 1662.2, 173: 1666.05, 174: 1669.9, 175: 1673.75,
        176: 1677.6,  177: 1681.45, 178: 1685.3, 179: 1689.15, 180: 1693.0, 181: 1696.85,
        182: 1700.7,  183: 1704.55, 184: 1708.4, 185: 1712.25, 186: 1716.1, 187: 1719.95,
        188: 1723.8,  189: 1727.65, 190: 1731.5, 191: 1735.35, 192: 1739.2, 193: 1743.05,
        194: 1746.9,  195: 1750.75, 196: 1754.6, 197: 1758.45, 198: 1762.3, 199: 1766.15,
        200: 1770.0
    },

    // PT100 (Platinum RTD, 100 ohm at 0°C)
    'pt100': {
        -10: 96.15,   -9: 96.535,  -8: 96.92,   -7: 97.305,  -6: 97.69,   -5: 98.075,
        -4: 98.46,    -3: 98.845,  -2: 99.23,   -1: 99.615,  0: 100.0,    1: 100.385,
        2: 100.77,    3: 101.155,  4: 101.54,   5: 101.925,  6: 102.31,   7: 102.695,
        8: 103.08,    9: 103.465,  10: 103.85,  11: 104.235, 12: 104.62,  13: 105.005,
        14: 105.39,   15: 105.775, 16: 106.16,  17: 106.545, 18: 106.93,  19: 107.315,
        20: 107.7,    21: 108.085, 22: 108.47,  23: 108.855, 24: 109.24,  25: 109.625,
        26: 110.01,   27: 110.395, 28: 110.78,  29: 111.165, 30: 111.55,  31: 111.935,
        32: 112.32,   33: 112.705, 34: 113.09,  35: 113.475, 36: 113.86,  37: 114.245,
        38: 114.63,   39: 115.015, 40: 115.4,   41: 115.785, 42: 116.17,  43: 116.555,
        44: 116.94,   45: 117.325, 46: 117.71,  47: 118.095, 48: 118.48,  49: 118.865,
        50: 119.25,   51: 119.635, 52: 120.02,  53: 120.405, 54: 120.79,  55: 121.175,
        56: 121.56,   57: 121.945, 58: 122.33,  59: 122.715, 60: 123.1,   61: 123.485,
        62: 123.87,   63: 124.255, 64: 124.64,  65: 125.025, 66: 125.41,  67: 125.795,
        68: 126.18,   69: 126.565, 70: 126.95,  71: 127.335, 72: 127.72,  73: 128.105,
        74: 128.49,   75: 128.875, 76: 129.26,  77: 129.645, 78: 130.03,  79: 130.415,
        80: 130.8,    81: 131.185, 82: 131.57,  83: 131.955, 84: 132.34,  85: 132.725,
        86: 133.11,   87: 133.495, 88: 133.88,  89: 134.265, 90: 134.65,  91: 135.035,
        92: 135.42,   93: 135.805, 94: 136.19,  95: 136.575, 96: 136.96,  97: 137.345,
        98: 137.73,   99: 138.115, 100: 138.5,  101: 138.885, 102: 139.27, 103: 139.655,
        104: 140.04,  105: 140.425, 106: 140.81, 107: 141.195, 108: 141.58, 109: 141.965,
        110: 142.35,  111: 142.735, 112: 143.12, 113: 143.505, 114: 143.89, 115: 144.275,
        116: 144.66,  117: 145.045, 118: 145.43, 119: 145.815, 120: 146.2, 121: 146.585,
        122: 146.97,  123: 147.355, 124: 147.74, 125: 148.125, 126: 148.51, 127: 148.895,
        128: 149.28,  129: 149.665, 130: 150.05, 131: 150.435, 132: 150.82, 133: 151.205,
        134: 151.59,  135: 151.975, 136: 152.36, 137: 152.745, 138: 153.13, 139: 153.515,
        140: 153.9,   141: 154.285, 142: 154.67, 143: 155.055, 144: 155.44, 145: 155.825,
        146: 156.21,  147: 156.595, 148: 156.98, 149: 157.365, 150: 157.75, 151: 158.135,
        152: 158.52,  153: 158.905, 154: 159.29, 155: 159.675, 156: 160.06, 157: 160.445,
        158: 160.83,  159: 161.215, 160: 161.6,  161: 161.985, 162: 162.37, 163: 162.755,
        164: 163.14,  165: 163.525, 166: 163.91, 167: 164.295, 168: 164.68, 169: 165.065,
        170: 165.45,  171: 165.835, 172: 166.22, 173: 166.605, 174: 166.99, 175: 167.375,
        176: 167.76,  177: 168.145, 178: 168.53, 179: 168.915, 180: 169.3, 181: 169.685,
        182: 170.07,  183: 170.455, 184: 170.84, 185: 171.225, 186: 171.61, 187: 171.995,
        188: 172.38,  189: 172.765, 190: 173.15, 191: 173.535, 192: 173.92, 193: 174.305,
        194: 174.69,  195: 175.075, 196: 175.46, 197: 175.845, 198: 176.23, 199: 176.615,
        200: 177.0
    }
};

// Function to interpolate between known values
window.interpolateValue = function(data, targetValue, searchByTemp = true) {
    const entries = Object.entries(data).map(([key, value]) => [parseFloat(key), value]);
    entries.sort((a, b) => a[0] - b[0]);
    
    if (searchByTemp) {
        // Find temperature for given resistance
        const temp = targetValue;
        if (data[temp] !== undefined) {
            return data[temp];
        }
        
        // Find closest temperatures for interpolation
        let lower = null, upper = null;
        for (const [tempKey, resistance] of entries) {
            if (tempKey <= temp) {
                lower = [tempKey, resistance];
            } else if (tempKey > temp && upper === null) {
                upper = [tempKey, resistance];
                break;
            }
        }
        
        if (lower && upper) {
            const ratio = (temp - lower[0]) / (upper[0] - lower[0]);
            return lower[1] + ratio * (upper[1] - lower[1]);
        }
        
        return lower ? lower[1] : (upper ? upper[1] : null);
    } else {
        // Find temperature for given resistance
        const resistance = targetValue;
        
        // Find the two closest resistance values for interpolation
        let lower = null, upper = null;
        
        // Sort entries by resistance value
        const sortedEntries = entries.sort((a, b) => a[1] - b[1]);
        
        // Find the closest resistance values
        for (let i = 0; i < sortedEntries.length; i++) {
            const [temp, res] = sortedEntries[i];
            
            if (res <= resistance) {
                lower = [temp, res];
            } else {
                upper = [temp, res];
                break;
            }
        }
        
        // If we didn't find an upper bound, use the last entry
        if (!upper && sortedEntries.length > 0) {
            upper = sortedEntries[sortedEntries.length - 1];
        }
        
        // If we didn't find a lower bound, use the first entry
        if (!lower && sortedEntries.length > 0) {
            lower = sortedEntries[0];
        }
        
        // If we have both bounds, interpolate
        if (lower && upper && lower[1] !== upper[1]) {
            const ratio = (resistance - lower[1]) / (upper[1] - lower[1]);
            return lower[0] + ratio * (upper[0] - lower[0]);
        }
        
        // If we only have one bound, return that temperature
        return lower ? lower[0] : (upper ? upper[0] : null);
    }
}

// Add a test function for debugging
window.testTempProbeData = function() {
    console.log('Testing temperature probe data...');
    console.log('Available probe types:', Object.keys(window.TEMP_PROBE_DATA));
    
    // Test temperature to resistance
    const testTemp = 25;
    const testResistance = window.interpolateValue(window.TEMP_PROBE_DATA.ntc3k3, testTemp, true);
    console.log(`NTC 3.3k at ${testTemp}°C: ${testResistance}Ω`);
    
    // Test resistance to temperature
    const testRes = 6070; // Should be around 25°C for NTC 3.3k
    const testTempResult = window.interpolateValue(window.TEMP_PROBE_DATA.ntc3k3, testRes, false);
    console.log(`NTC 3.3k with ${testRes}Ω: ${testTempResult}°C`);
    
    return 'Test completed - check console for results';
};

console.log('Temperature probe data loaded successfully');
console.log('window.TEMP_PROBE_DATA:', window.TEMP_PROBE_DATA);
console.log('window.interpolateValue:', window.interpolateValue);